---
# Pre-Deploy Playbook
- name: "**** Prepare host for deploy"
  hosts: basil
  remote_user: root

  tasks:
  - name: Install general system packages
    apt: pkg={{ item }} state=latest update_cache=yes
    with_items:
      - fail2ban
      - git
      - vim
      - tmux
    tags:
      - prepare_host

  - name: Find authorized keys file
    stat: path=/home/ubuntu/.ssh/authorized_keys
    register: keyfile

  - name: Remove empty authorized keys file
    file: path=/home/ubuntu/.ssh/authorized_keys state=absent
    when:
      - keyfile.stat is defined
      - keyfile.stat.isreg is defined
      - keyfile.stat.isreg
      - keyfile.stat.size == 0
    tags:
      - prepare_host

  - name: Replcate authorized key
    command: cp /root/.ssh/authorized_keys /home/ubuntu/.ssh/authorized_keys
    args:
      creates: /home/ubuntu/.ssh/authorized_keys
    tags:
      - prepare_host

  - name: Lock down authorized key
    file: path=/home/ubuntu/.ssh/authorized_keys owner=ubuntu group=ubuntu state=file mode=0600
    tags:
      - prepare_host

  - name: Forbid password auth
    lineinfile:
      dest=/etc/ssh/sshd_config
      regexp='^PasswordAuthentication'
      line='PasswordAuthentication no'
    notify: Restart sshd
    tags:
      - prepare_host

  - name: Disallow DNS lookups by sshd
    lineinfile:
      dest=/etc/ssh/sshd_config
      regexp='^UseDNS'
      line='UseDNS no'
    notify: Restart sshd
    tags:
      - prepare_host

  - name: Disallow X11Forwarding
    lineinfile:
      dest=/etc/ssh/sshd_config
      regexp='^X11Forwarding'
      line='X11Forwarding no'
    notify: Restart sshd
    tags:
      - prepare_host

  - name: Enable TCPKeepAlive
    lineinfile:
      dest=/etc/ssh/sshd_config
      regexp='TCPKeepAlive'
      line='TCPKeepAlive yes'
    notify: Restart sshd
    tags:
      - prepare_host

  handlers:
  - name: Restart sshd
    service: name=ssh state=restarted

# Main Deployment Playbook
- name: "**** Deploy web services (use existing DBs + caches)"
  hosts: basil
  remote_user: ubuntu
  become: True
  roles:
  - { role: wsgi-app,
      app_name: refapi,
      nginx_host: "refapi.basil.{{ root_domain }}",
      uwsgi_port: 8090,
      wsgi_app_entry: "basil_refapi.server:application",
      wsgi_envs: "{{ refapi_envs }}",
      tags: ['wsgi', 'refapi'] }
  - { role: wsgi-app,
      app_name: watches,
      nginx_host: "watches.basil.{{ root_domain }}",
      uwsgi_port: 8091,
      wsgi_envs: "{{ watches_envs }}",
      tags: ['wsgi', 'watches'] }
  - { role: wsgi-app,
      app_name: prices,
      nginx_host: "prices.basil.{{ root_domain }}",
      uwsgi_port: 8092,
      wsgi_envs: "{{ prices_envs }}",
      tags: ['wsgi', 'prices'] }

- name: "**** Deploy checker cron service (use existing DBs + caches)"
  hosts: basil
  remote_user: ubuntu
  become: True
  roles:

  - { role: cron-app,
      app_name: checker,
      app_envs: "{{ checker_envs }}",
      tags: ['cron', 'checker'] }

- name: "**** Deploy prospector cron service (use existing DBs + caches)"
  hosts: basil
  remote_user: ubuntu
  become: True
  pre_tasks:
  - name: Ensure paths
    file: path={{ item | dirname }} state=directory
          owner={{ report_owner }} group={{ report_owner }} mode=0774
    with_items:
      - prospector_corp_envs.OUTPUT_PATH
    become: yes
    tags:
      - directories
  roles:
  - { role: cron-app,
      app_name: prospector,
      app_envs: "{{ prospector_corp_envs }}",
      hour: "1,7,13,19",
      minute: 22,
      tags: ['cron', 'prospector'] }
  vars:
  - report_owner: www-data